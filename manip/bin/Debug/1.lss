
bin/Debug/1.elf:     формат файла elf32-avr

Разделы:
Инд Имя           Размер    VMA       LMA       Файл      Вырав
  0 .text         00000c22  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000c22  00000cd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d1  00800076  00800076  00000cec  2**0
                  ALLOC
  3 .fuse         00000002  00820000  00820000  00000cec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00002ac0  00000000  00000000  00000cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000012b1  00000000  00000000  000037b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00004a61  2**0
                  CONTENTS, READONLY

Дизассемблирование раздела .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 34       	cpi	r26, 0x47	; 71
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bf 02 	call	0x57e	; 0x57e <main>
  8a:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_Init>:

void ExecKeyAction(void);


void USART_Init(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  UBRRH = 0;
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	fc 01       	movw	r30, r24
  a0:	10 82       	st	Z, r1
  UBRRL = 25; //UBRR = (Fck/(16*BAUD)) – 1 скорость обмена 9600 бод
  a2:	89 e2       	ldi	r24, 0x29	; 41
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	29 e1       	ldi	r18, 0x19	; 25
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18
  //разр. прерыв при приеме, разр приема, разр передачи.
  UCSRB = (1<<RXEN)|(1<<TXEN);
  ac:	8a e2       	ldi	r24, 0x2A	; 42
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	28 e1       	ldi	r18, 0x18	; 24
  b2:	fc 01       	movw	r30, r24
  b4:	20 83       	st	Z, r18
  //обращаемся к регистру UCSRS, размер слова – 8 бит
  UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  b6:	80 e4       	ldi	r24, 0x40	; 64
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	26 e8       	ldi	r18, 0x86	; 134
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
}
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	1f 92       	push	r1
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	89 83       	std	Y+1, r24	; 0x01
//Wait for empty transmit buffer
while ( !( UCSRA & (1<<UDRE)) );
  d2:	00 00       	nop
  d4:	8b e2       	ldi	r24, 0x2B	; 43
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	88 2f       	mov	r24, r24
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	80 72       	andi	r24, 0x20	; 32
  e2:	99 27       	eor	r25, r25
  e4:	00 97       	sbiw	r24, 0x00	; 0
  e6:	b1 f3       	breq	.-20     	; 0xd4 <USART_Transmit+0xe>
//Put data into buffer, sends the data
UDR = data;
  e8:	8c e2       	ldi	r24, 0x2C	; 44
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	29 81       	ldd	r18, Y+1	; 0x01
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
}
  f2:	0f 90       	pop	r0
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <ScanKeyboard>:



void ScanKeyboard(void)
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	2e 97       	sbiw	r28, 0x0e	; 14
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
    switch(keyState)
 10e:	80 91 43 01 	lds	r24, 0x0143
 112:	88 2f       	mov	r24, r24
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	91 05       	cpc	r25, r1
 11a:	d1 f0       	breq	.+52     	; 0x150 <ScanKeyboard+0x56>
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	91 05       	cpc	r25, r1
 120:	1c f4       	brge	.+6      	; 0x128 <ScanKeyboard+0x2e>
 122:	00 97       	sbiw	r24, 0x00	; 0
 124:	51 f0       	breq	.+20     	; 0x13a <ScanKeyboard+0x40>
    {
        case 0: if(AnyKey()){ScanKey(); keyState=1;}break;
        case 1: if(SameKey()){_delay_ms(200); FindAction();keyState=2;}else keyState=0;break;
        case 2: if(SameKey());else keyState=3;break;
        case 3: if(SameKey()){keyState=2;}else{ExecKeyAction();ClearKey();keyState=0;}break;
        default:break;
 126:	ac c0       	rjmp	.+344    	; 0x280 <ScanKeyboard+0x186>



void ScanKeyboard(void)
{
    switch(keyState)
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	91 05       	cpc	r25, r1
 12c:	09 f4       	brne	.+2      	; 0x130 <ScanKeyboard+0x36>
 12e:	90 c0       	rjmp	.+288    	; 0x250 <ScanKeyboard+0x156>
 130:	83 30       	cpi	r24, 0x03	; 3
 132:	91 05       	cpc	r25, r1
 134:	09 f4       	brne	.+2      	; 0x138 <ScanKeyboard+0x3e>
 136:	95 c0       	rjmp	.+298    	; 0x262 <ScanKeyboard+0x168>
    {
        case 0: if(AnyKey()){ScanKey(); keyState=1;}break;
        case 1: if(SameKey()){_delay_ms(200); FindAction();keyState=2;}else keyState=0;break;
        case 2: if(SameKey());else keyState=3;break;
        case 3: if(SameKey()){keyState=2;}else{ExecKeyAction();ClearKey();keyState=0;}break;
        default:break;
 138:	a3 c0       	rjmp	.+326    	; 0x280 <ScanKeyboard+0x186>

void ScanKeyboard(void)
{
    switch(keyState)
    {
        case 0: if(AnyKey()){ScanKey(); keyState=1;}break;
 13a:	0e 94 49 01 	call	0x292	; 0x292 <AnyKey>
 13e:	88 23       	and	r24, r24
 140:	31 f0       	breq	.+12     	; 0x14e <ScanKeyboard+0x54>
 142:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <ScanKey>
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 43 01 	sts	0x0143, r24
 14c:	99 c0       	rjmp	.+306    	; 0x280 <ScanKeyboard+0x186>
 14e:	98 c0       	rjmp	.+304    	; 0x280 <ScanKeyboard+0x186>
        case 1: if(SameKey()){_delay_ms(200); FindAction();keyState=2;}else keyState=0;break;
 150:	0e 94 a4 01 	call	0x348	; 0x348 <SameKey>
 154:	88 23       	and	r24, r24
 156:	09 f4       	brne	.+2      	; 0x15a <ScanKeyboard+0x60>
 158:	78 c0       	rjmp	.+240    	; 0x24a <ScanKeyboard+0x150>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	a8 e4       	ldi	r26, 0x48	; 72
 160:	b3 e4       	ldi	r27, 0x43	; 67
 162:	89 83       	std	Y+1, r24	; 0x01
 164:	9a 83       	std	Y+2, r25	; 0x02
 166:	ab 83       	std	Y+3, r26	; 0x03
 168:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	4a e7       	ldi	r20, 0x7A	; 122
 170:	54 e4       	ldi	r21, 0x44	; 68
 172:	69 81       	ldd	r22, Y+1	; 0x01
 174:	7a 81       	ldd	r23, Y+2	; 0x02
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	9c 81       	ldd	r25, Y+4	; 0x04
 17a:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
 17e:	dc 01       	movw	r26, r24
 180:	cb 01       	movw	r24, r22
 182:	8d 83       	std	Y+5, r24	; 0x05
 184:	9e 83       	std	Y+6, r25	; 0x06
 186:	af 83       	std	Y+7, r26	; 0x07
 188:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	40 e8       	ldi	r20, 0x80	; 128
 190:	5f e3       	ldi	r21, 0x3F	; 63
 192:	6d 81       	ldd	r22, Y+5	; 0x05
 194:	7e 81       	ldd	r23, Y+6	; 0x06
 196:	8f 81       	ldd	r24, Y+7	; 0x07
 198:	98 85       	ldd	r25, Y+8	; 0x08
 19a:	0e 94 03 05 	call	0xa06	; 0xa06 <__cmpsf2>
 19e:	88 23       	and	r24, r24
 1a0:	2c f4       	brge	.+10     	; 0x1ac <ScanKeyboard+0xb2>
		__ticks = 1;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	9a 87       	std	Y+10, r25	; 0x0a
 1a8:	89 87       	std	Y+9, r24	; 0x09
 1aa:	3f c0       	rjmp	.+126    	; 0x22a <ScanKeyboard+0x130>
	else if (__tmp > 65535)
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	3f ef       	ldi	r19, 0xFF	; 255
 1b0:	4f e7       	ldi	r20, 0x7F	; 127
 1b2:	57 e4       	ldi	r21, 0x47	; 71
 1b4:	6d 81       	ldd	r22, Y+5	; 0x05
 1b6:	7e 81       	ldd	r23, Y+6	; 0x06
 1b8:	8f 81       	ldd	r24, Y+7	; 0x07
 1ba:	98 85       	ldd	r25, Y+8	; 0x08
 1bc:	0e 94 80 05 	call	0xb00	; 0xb00 <__gesf2>
 1c0:	18 16       	cp	r1, r24
 1c2:	4c f5       	brge	.+82     	; 0x216 <ScanKeyboard+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	40 e2       	ldi	r20, 0x20	; 32
 1ca:	51 e4       	ldi	r21, 0x41	; 65
 1cc:	69 81       	ldd	r22, Y+1	; 0x01
 1ce:	7a 81       	ldd	r23, Y+2	; 0x02
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	9c 81       	ldd	r25, Y+4	; 0x04
 1d4:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
 1d8:	dc 01       	movw	r26, r24
 1da:	cb 01       	movw	r24, r22
 1dc:	bc 01       	movw	r22, r24
 1de:	cd 01       	movw	r24, r26
 1e0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
 1e4:	dc 01       	movw	r26, r24
 1e6:	cb 01       	movw	r24, r22
 1e8:	9a 87       	std	Y+10, r25	; 0x0a
 1ea:	89 87       	std	Y+9, r24	; 0x09
 1ec:	0f c0       	rjmp	.+30     	; 0x20c <ScanKeyboard+0x112>
 1ee:	84 e6       	ldi	r24, 0x64	; 100
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	9c 87       	std	Y+12, r25	; 0x0c
 1f4:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1f6:	8b 85       	ldd	r24, Y+11	; 0x0b
 1f8:	9c 85       	ldd	r25, Y+12	; 0x0c
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <ScanKeyboard+0x100>
 1fe:	9c 87       	std	Y+12, r25	; 0x0c
 200:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 202:	89 85       	ldd	r24, Y+9	; 0x09
 204:	9a 85       	ldd	r25, Y+10	; 0x0a
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	9a 87       	std	Y+10, r25	; 0x0a
 20a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 20c:	89 85       	ldd	r24, Y+9	; 0x09
 20e:	9a 85       	ldd	r25, Y+10	; 0x0a
 210:	00 97       	sbiw	r24, 0x00	; 0
 212:	69 f7       	brne	.-38     	; 0x1ee <ScanKeyboard+0xf4>
 214:	14 c0       	rjmp	.+40     	; 0x23e <ScanKeyboard+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 216:	6d 81       	ldd	r22, Y+5	; 0x05
 218:	7e 81       	ldd	r23, Y+6	; 0x06
 21a:	8f 81       	ldd	r24, Y+7	; 0x07
 21c:	98 85       	ldd	r25, Y+8	; 0x08
 21e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
 222:	dc 01       	movw	r26, r24
 224:	cb 01       	movw	r24, r22
 226:	9a 87       	std	Y+10, r25	; 0x0a
 228:	89 87       	std	Y+9, r24	; 0x09
 22a:	89 85       	ldd	r24, Y+9	; 0x09
 22c:	9a 85       	ldd	r25, Y+10	; 0x0a
 22e:	9e 87       	std	Y+14, r25	; 0x0e
 230:	8d 87       	std	Y+13, r24	; 0x0d
 232:	8d 85       	ldd	r24, Y+13	; 0x0d
 234:	9e 85       	ldd	r25, Y+14	; 0x0e
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <ScanKeyboard+0x13c>
 23a:	9e 87       	std	Y+14, r25	; 0x0e
 23c:	8d 87       	std	Y+13, r24	; 0x0d
 23e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <FindAction>
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	80 93 43 01 	sts	0x0143, r24
 248:	1b c0       	rjmp	.+54     	; 0x280 <ScanKeyboard+0x186>
 24a:	10 92 43 01 	sts	0x0143, r1
 24e:	18 c0       	rjmp	.+48     	; 0x280 <ScanKeyboard+0x186>
        case 2: if(SameKey());else keyState=3;break;
 250:	0e 94 a4 01 	call	0x348	; 0x348 <SameKey>
 254:	88 23       	and	r24, r24
 256:	21 f4       	brne	.+8      	; 0x260 <ScanKeyboard+0x166>
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	80 93 43 01 	sts	0x0143, r24
 25e:	10 c0       	rjmp	.+32     	; 0x280 <ScanKeyboard+0x186>
 260:	0f c0       	rjmp	.+30     	; 0x280 <ScanKeyboard+0x186>
        case 3: if(SameKey()){keyState=2;}else{ExecKeyAction();ClearKey();keyState=0;}break;
 262:	0e 94 a4 01 	call	0x348	; 0x348 <SameKey>
 266:	88 23       	and	r24, r24
 268:	21 f0       	breq	.+8      	; 0x272 <ScanKeyboard+0x178>
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	80 93 43 01 	sts	0x0143, r24
 270:	06 c0       	rjmp	.+12     	; 0x27e <ScanKeyboard+0x184>
 272:	0e 94 39 02 	call	0x472	; 0x472 <ExecKeyAction>
 276:	0e 94 cc 01 	call	0x398	; 0x398 <ClearKey>
 27a:	10 92 43 01 	sts	0x0143, r1
 27e:	00 00       	nop
        default:break;
    }
}
 280:	2e 96       	adiw	r28, 0x0e	; 14
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <AnyKey>:

unsigned char AnyKey(void)
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
    PORTC = (0x1f<<2);
 29a:	85 e3       	ldi	r24, 0x35	; 53
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	2c e7       	ldi	r18, 0x7C	; 124
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
    return (PINA & 0x0F);
 2a4:	89 e3       	ldi	r24, 0x39	; 57
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	fc 01       	movw	r30, r24
 2aa:	80 81       	ld	r24, Z
 2ac:	8f 70       	andi	r24, 0x0F	; 15
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <ScanKey>:

void ScanKey(void)
{
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	1f 92       	push	r1
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
    unsigned char activeRow;
    for(activeRow = 0;activeRow<5;activeRow++)
 2be:	19 82       	std	Y+1, r1	; 0x01
 2c0:	3c c0       	rjmp	.+120    	; 0x33a <ScanKey+0x86>
    {
         PORTC=(1<<(2+activeRow));
 2c2:	85 e3       	ldi	r24, 0x35	; 53
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	29 81       	ldd	r18, Y+1	; 0x01
 2c8:	22 2f       	mov	r18, r18
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	a9 01       	movw	r20, r18
 2ce:	4e 5f       	subi	r20, 0xFE	; 254
 2d0:	5f 4f       	sbci	r21, 0xFF	; 255
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	04 2e       	mov	r0, r20
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <ScanKey+0x2a>
 2da:	22 0f       	add	r18, r18
 2dc:	33 1f       	adc	r19, r19
 2de:	0a 94       	dec	r0
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <ScanKey+0x26>
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 83       	st	Z, r18
         keyCode =(PINA & 0x0F);
 2e6:	89 e3       	ldi	r24, 0x39	; 57
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	fc 01       	movw	r30, r24
 2ec:	80 81       	ld	r24, Z
 2ee:	8f 70       	andi	r24, 0x0F	; 15
 2f0:	80 93 40 01 	sts	0x0140, r24
        if(keyCode)
 2f4:	80 91 40 01 	lds	r24, 0x0140
 2f8:	88 23       	and	r24, r24
 2fa:	e1 f0       	breq	.+56     	; 0x334 <ScanKey+0x80>
        {
            if(activeRow<4)
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	84 30       	cpi	r24, 0x04	; 4
 300:	a8 f4       	brcc	.+42     	; 0x32c <ScanKey+0x78>
                keyCode |= (0x01<<(4+activeRow));
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	88 2f       	mov	r24, r24
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	9c 01       	movw	r18, r24
 30a:	2c 5f       	subi	r18, 0xFC	; 252
 30c:	3f 4f       	sbci	r19, 0xFF	; 255
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 2e       	mov	r0, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <ScanKey+0x66>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <ScanKey+0x62>
 31e:	98 2f       	mov	r25, r24
 320:	80 91 40 01 	lds	r24, 0x0140
 324:	89 2b       	or	r24, r25
 326:	80 93 40 01 	sts	0x0140, r24
            else funcKey=1;
            break;
 32a:	0a c0       	rjmp	.+20     	; 0x340 <ScanKey+0x8c>
         keyCode =(PINA & 0x0F);
        if(keyCode)
        {
            if(activeRow<4)
                keyCode |= (0x01<<(4+activeRow));
            else funcKey=1;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	80 93 3e 01 	sts	0x013E, r24
            break;
 332:	06 c0       	rjmp	.+12     	; 0x340 <ScanKey+0x8c>
}

void ScanKey(void)
{
    unsigned char activeRow;
    for(activeRow = 0;activeRow<5;activeRow++)
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	8f 5f       	subi	r24, 0xFF	; 255
 338:	89 83       	std	Y+1, r24	; 0x01
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	85 30       	cpi	r24, 0x05	; 5
 33e:	08 f2       	brcs	.-126    	; 0x2c2 <ScanKey+0xe>
                keyCode |= (0x01<<(4+activeRow));
            else funcKey=1;
            break;
        }
    }
}
 340:	0f 90       	pop	r0
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <SameKey>:

unsigned char SameKey(void)
{
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62
    if(funcKey)
 350:	80 91 3e 01 	lds	r24, 0x013E
 354:	88 23       	and	r24, r24
 356:	31 f0       	breq	.+12     	; 0x364 <SameKey+0x1c>
        PORTC = (1<<PC6);
 358:	85 e3       	ldi	r24, 0x35	; 53
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	20 e4       	ldi	r18, 0x40	; 64
 35e:	fc 01       	movw	r30, r24
 360:	20 83       	st	Z, r18
 362:	0f c0       	rjmp	.+30     	; 0x382 <SameKey+0x3a>
    else
        PORTC = (((keyCode & 0xF0)>>2) & 0x7C);
 364:	85 e3       	ldi	r24, 0x35	; 53
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	20 91 40 01 	lds	r18, 0x0140
 36c:	22 2f       	mov	r18, r18
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	20 7f       	andi	r18, 0xF0	; 240
 372:	33 27       	eor	r19, r19
 374:	35 95       	asr	r19
 376:	27 95       	ror	r18
 378:	35 95       	asr	r19
 37a:	27 95       	ror	r18
 37c:	2c 77       	andi	r18, 0x7C	; 124
 37e:	fc 01       	movw	r30, r24
 380:	20 83       	st	Z, r18
        return (PINA & (keyCode & 0x0F));
 382:	89 e3       	ldi	r24, 0x39	; 57
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	fc 01       	movw	r30, r24
 388:	90 81       	ld	r25, Z
 38a:	80 91 40 01 	lds	r24, 0x0140
 38e:	89 23       	and	r24, r25
 390:	8f 70       	andi	r24, 0x0F	; 15
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <ClearKey>:

void ClearKey(void)
{
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
    keyDown=0;
 3a0:	10 92 46 01 	sts	0x0146, r1
    funcKey=0;
 3a4:	10 92 3e 01 	sts	0x013E, r1
	keyAction = 0;
 3a8:	10 92 42 01 	sts	0x0142, r1
}
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <FindAction>:

unsigned char FindAction()
{
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	1f 92       	push	r1
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
    unsigned char i;
    if(funcKey==1)
 3bc:	80 91 3e 01 	lds	r24, 0x013E
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	51 f5       	brne	.+84     	; 0x418 <FindAction+0x66>
    {
        for(i=0;i<4;i++)
 3c4:	19 82       	std	Y+1, r1	; 0x01
 3c6:	23 c0       	rjmp	.+70     	; 0x40e <FindAction+0x5c>
        {
            if(funcTable[i][0]==keyCode)
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	88 2f       	mov	r24, r24
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	80 59       	subi	r24, 0x90	; 144
 3d4:	9f 4f       	sbci	r25, 0xFF	; 255
 3d6:	fc 01       	movw	r30, r24
 3d8:	90 81       	ld	r25, Z
 3da:	80 91 40 01 	lds	r24, 0x0140
 3de:	98 17       	cp	r25, r24
 3e0:	99 f4       	brne	.+38     	; 0x408 <FindAction+0x56>
            {
                keyAction=funcTable[i][1];
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	88 2f       	mov	r24, r24
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	8f 58       	subi	r24, 0x8F	; 143
 3ee:	9f 4f       	sbci	r25, 0xFF	; 255
 3f0:	fc 01       	movw	r30, r24
 3f2:	80 81       	ld	r24, Z
 3f4:	80 93 42 01 	sts	0x0142, r24
                keyDown=1;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	80 93 46 01 	sts	0x0146, r24
                keyNew=1;
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	80 93 45 01 	sts	0x0145, r24
                return 1;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	31 c0       	rjmp	.+98     	; 0x46a <__stack+0xb>
unsigned char FindAction()
{
    unsigned char i;
    if(funcKey==1)
    {
        for(i=0;i<4;i++)
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	8f 5f       	subi	r24, 0xFF	; 255
 40c:	89 83       	std	Y+1, r24	; 0x01
 40e:	89 81       	ldd	r24, Y+1	; 0x01
 410:	84 30       	cpi	r24, 0x04	; 4
 412:	d0 f2       	brcs	.-76     	; 0x3c8 <FindAction+0x16>
                keyDown=1;
                keyNew=1;
                return 1;
            }
        }
        return 0;
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	29 c0       	rjmp	.+82     	; 0x46a <__stack+0xb>
    }
    for(i=0;i<8;i++)    //16
 418:	19 82       	std	Y+1, r1	; 0x01
 41a:	23 c0       	rjmp	.+70     	; 0x462 <__stack+0x3>
    {
        if(actionTable[i][0]==keyCode)
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	88 2f       	mov	r24, r24
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	80 5a       	subi	r24, 0xA0	; 160
 428:	9f 4f       	sbci	r25, 0xFF	; 255
 42a:	fc 01       	movw	r30, r24
 42c:	90 81       	ld	r25, Z
 42e:	80 91 40 01 	lds	r24, 0x0140
 432:	98 17       	cp	r25, r24
 434:	99 f4       	brne	.+38     	; 0x45c <FindAction+0xaa>
        {
            keyAction=actionTable[i][1];
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	88 2f       	mov	r24, r24
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	8f 59       	subi	r24, 0x9F	; 159
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	fc 01       	movw	r30, r24
 446:	80 81       	ld	r24, Z
 448:	80 93 42 01 	sts	0x0142, r24
            keyDown=1;
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	80 93 46 01 	sts	0x0146, r24
            keyNew=1;
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	80 93 45 01 	sts	0x0145, r24
            return 1;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	07 c0       	rjmp	.+14     	; 0x46a <__stack+0xb>
                return 1;
            }
        }
        return 0;
    }
    for(i=0;i<8;i++)    //16
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	8f 5f       	subi	r24, 0xFF	; 255
 460:	89 83       	std	Y+1, r24	; 0x01
 462:	89 81       	ldd	r24, Y+1	; 0x01
 464:	88 30       	cpi	r24, 0x08	; 8
 466:	d0 f2       	brcs	.-76     	; 0x41c <FindAction+0x6a>
            keyDown=1;
            keyNew=1;
            return 1;
        }
    }
    return 0;
 468:	80 e0       	ldi	r24, 0x00	; 0
}
 46a:	0f 90       	pop	r0
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <ExecKeyAction>:

void ExecKeyAction(void)
{
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
	keyCount++;
 47a:	80 91 41 01 	lds	r24, 0x0141
 47e:	8f 5f       	subi	r24, 0xFF	; 255
 480:	80 93 41 01 	sts	0x0141, r24
    bufPB=keyAction;
 484:	80 91 42 01 	lds	r24, 0x0142
 488:	80 93 44 01 	sts	0x0144, r24
	USART_Transmit(bufPB);
 48c:	80 91 44 01 	lds	r24, 0x0144
 490:	0e 94 63 00 	call	0xc6	; 0xc6 <USART_Transmit>
}
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <init>:

void init(void) // init:   Reset and recalibrate
{
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x00;
 4a2:	8b e3       	ldi	r24, 0x3B	; 59
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	fc 01       	movw	r30, r24
 4a8:	10 82       	st	Z, r1
	PORTB=0x00;
 4aa:	88 e3       	ldi	r24, 0x38	; 56
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	fc 01       	movw	r30, r24
 4b0:	10 82       	st	Z, r1
	PORTC=(0x1f<<2);
 4b2:	85 e3       	ldi	r24, 0x35	; 53
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	2c e7       	ldi	r18, 0x7C	; 124
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 83       	st	Z, r18
	PORTD=0x00;
 4bc:	82 e3       	ldi	r24, 0x32	; 50
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	fc 01       	movw	r30, r24
 4c2:	10 82       	st	Z, r1
	keyState=keyCode=keyAction=keyCount=bufPB=0;
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	80 93 44 01 	sts	0x0144, r24
 4ca:	80 93 41 01 	sts	0x0141, r24
 4ce:	80 93 42 01 	sts	0x0142, r24
 4d2:	80 93 40 01 	sts	0x0140, r24
 4d6:	80 93 43 01 	sts	0x0143, r24
	funcKey=keyDown=keyNew=0;
 4da:	10 92 45 01 	sts	0x0145, r1
 4de:	80 91 45 01 	lds	r24, 0x0145
 4e2:	80 93 46 01 	sts	0x0146, r24
 4e6:	80 91 46 01 	lds	r24, 0x0146
 4ea:	80 93 3e 01 	sts	0x013E, r24
	mas=0;
 4ee:	10 92 3f 01 	sts	0x013F, r1
}
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <doWork>:

void doWork(void)
{
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
    if(bufPB & 0xF0)
 500:	80 91 44 01 	lds	r24, 0x0144
 504:	88 2f       	mov	r24, r24
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	80 7f       	andi	r24, 0xF0	; 240
 50a:	99 27       	eor	r25, r25
 50c:	00 97       	sbiw	r24, 0x00	; 0
 50e:	d1 f0       	breq	.+52     	; 0x544 <doWork+0x4c>
        PORTB |= 1<<(bufPB & 0x0F);
 510:	88 e3       	ldi	r24, 0x38	; 56
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	28 e3       	ldi	r18, 0x38	; 56
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	f9 01       	movw	r30, r18
 51a:	20 81       	ld	r18, Z
 51c:	62 2f       	mov	r22, r18
 51e:	20 91 44 01 	lds	r18, 0x0144
 522:	22 2f       	mov	r18, r18
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	a9 01       	movw	r20, r18
 528:	4f 70       	andi	r20, 0x0F	; 15
 52a:	55 27       	eor	r21, r21
 52c:	21 e0       	ldi	r18, 0x01	; 1
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	04 2e       	mov	r0, r20
 532:	02 c0       	rjmp	.+4      	; 0x538 <doWork+0x40>
 534:	22 0f       	add	r18, r18
 536:	33 1f       	adc	r19, r19
 538:	0a 94       	dec	r0
 53a:	e2 f7       	brpl	.-8      	; 0x534 <doWork+0x3c>
 53c:	26 2b       	or	r18, r22
 53e:	fc 01       	movw	r30, r24
 540:	20 83       	st	Z, r18
 542:	1a c0       	rjmp	.+52     	; 0x578 <doWork+0x80>
    else
        PORTB &= 0xFF-(1<<(bufPB & 0x0F));
 544:	88 e3       	ldi	r24, 0x38	; 56
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	28 e3       	ldi	r18, 0x38	; 56
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	f9 01       	movw	r30, r18
 54e:	20 81       	ld	r18, Z
 550:	62 2f       	mov	r22, r18
 552:	20 91 44 01 	lds	r18, 0x0144
 556:	22 2f       	mov	r18, r18
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	a9 01       	movw	r20, r18
 55c:	4f 70       	andi	r20, 0x0F	; 15
 55e:	55 27       	eor	r21, r21
 560:	21 e0       	ldi	r18, 0x01	; 1
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	04 2e       	mov	r0, r20
 566:	02 c0       	rjmp	.+4      	; 0x56c <doWork+0x74>
 568:	22 0f       	add	r18, r18
 56a:	33 1f       	adc	r19, r19
 56c:	0a 94       	dec	r0
 56e:	e2 f7       	brpl	.-8      	; 0x568 <doWork+0x70>
 570:	20 95       	com	r18
 572:	26 23       	and	r18, r22
 574:	fc 01       	movw	r30, r24
 576:	20 83       	st	Z, r18
}
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	08 95       	ret

0000057e <main>:

int main(void)
{
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	cd b7       	in	r28, 0x3d	; 61
 584:	de b7       	in	r29, 0x3e	; 62
 586:	aa 97       	sbiw	r28, 0x2a	; 42
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	f8 94       	cli
 58c:	de bf       	out	0x3e, r29	; 62
 58e:	0f be       	out	0x3f, r0	; 63
 590:	cd bf       	out	0x3d, r28	; 61

DDRA=0x00; //светодиоды для парных
 592:	8a e3       	ldi	r24, 0x3A	; 58
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	fc 01       	movw	r30, r24
 598:	10 82       	st	Z, r1
PORTA=0x00;
 59a:	8b e3       	ldi	r24, 0x3B	; 59
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	fc 01       	movw	r30, r24
 5a0:	10 82       	st	Z, r1

DDRB=0xFF; //не исп
 5a2:	87 e3       	ldi	r24, 0x37	; 55
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	2f ef       	ldi	r18, 0xFF	; 255
 5a8:	fc 01       	movw	r30, r24
 5aa:	20 83       	st	Z, r18
PORTB=0x00;
 5ac:	88 e3       	ldi	r24, 0x38	; 56
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	fc 01       	movw	r30, r24
 5b2:	10 82       	st	Z, r1

DDRC=0xFF;    //клав
 5b4:	84 e3       	ldi	r24, 0x34	; 52
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	2f ef       	ldi	r18, 0xFF	; 255
 5ba:	fc 01       	movw	r30, r24
 5bc:	20 83       	st	Z, r18
PORTC=(0x1f<<2);
 5be:	85 e3       	ldi	r24, 0x35	; 53
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	2c e7       	ldi	r18, 0x7C	; 124
 5c4:	fc 01       	movw	r30, r24
 5c6:	20 83       	st	Z, r18

DDRD=0b11111100; //PD7-PD2 as output, светодиоды для непарных и юарт
 5c8:	81 e3       	ldi	r24, 0x31	; 49
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	2c ef       	ldi	r18, 0xFC	; 252
 5ce:	fc 01       	movw	r30, r24
 5d0:	20 83       	st	Z, r18
PORTD=0b00000000;
 5d2:	82 e3       	ldi	r24, 0x32	; 50
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	fc 01       	movw	r30, r24
 5d8:	10 82       	st	Z, r1

keyState=keyCode=keyAction=keyCount=bufPB=0;
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	80 93 44 01 	sts	0x0144, r24
 5e0:	80 93 41 01 	sts	0x0141, r24
 5e4:	80 93 42 01 	sts	0x0142, r24
 5e8:	80 93 40 01 	sts	0x0140, r24
 5ec:	80 93 43 01 	sts	0x0143, r24
funcKey=keyDown=keyNew=0;
 5f0:	10 92 45 01 	sts	0x0145, r1
 5f4:	80 91 45 01 	lds	r24, 0x0145
 5f8:	80 93 46 01 	sts	0x0146, r24
 5fc:	80 91 46 01 	lds	r24, 0x0146
 600:	80 93 3e 01 	sts	0x013E, r24

USART_Init();
 604:	0e 94 49 00 	call	0x92	; 0x92 <USART_Init>

manual:											// РУЧНОЙ РЕЖ_____________________
init();
 608:	0e 94 4d 02 	call	0x49a	; 0x49a <init>
PORTD=0b00100000;
 60c:	82 e3       	ldi	r24, 0x32	; 50
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	20 e2       	ldi	r18, 0x20	; 32
 612:	fc 01       	movw	r30, r24
 614:	20 83       	st	Z, r18
while (1)
{
	ScanKeyboard();
 616:	0e 94 7d 00 	call	0xfa	; 0xfa <ScanKeyboard>
	switch(keyAction)
 61a:	80 91 42 01 	lds	r24, 0x0142
 61e:	88 2f       	mov	r24, r24
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	8b 30       	cpi	r24, 0x0B	; 11
 624:	91 05       	cpc	r25, r1
 626:	49 f0       	breq	.+18     	; 0x63a <main+0xbc>
 628:	8c 30       	cpi	r24, 0x0C	; 12
 62a:	91 05       	cpc	r25, r1
 62c:	09 f4       	brne	.+2      	; 0x630 <main+0xb2>
 62e:	78 c0       	rjmp	.+240    	; 0x720 <main+0x1a2>
 630:	8a 30       	cpi	r24, 0x0A	; 10
 632:	91 05       	cpc	r25, r1
 634:	09 f4       	brne	.+2      	; 0x638 <main+0xba>
 636:	3f c1       	rjmp	.+638    	; 0x8b6 <main+0x338>
    {
		case 0x0A: goto execute; break;		// к ВЫП
        case 0x0B: _delay_ms(500); goto listen; break;		// к ЗАП
        case 0x0C: PORTD=0b00100000; break;
        default:break;
 638:	79 c0       	rjmp	.+242    	; 0x72c <main+0x1ae>
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	aa ef       	ldi	r26, 0xFA	; 250
 640:	b3 e4       	ldi	r27, 0x43	; 67
 642:	89 83       	std	Y+1, r24	; 0x01
 644:	9a 83       	std	Y+2, r25	; 0x02
 646:	ab 83       	std	Y+3, r26	; 0x03
 648:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 64a:	20 e0       	ldi	r18, 0x00	; 0
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	4a e7       	ldi	r20, 0x7A	; 122
 650:	54 e4       	ldi	r21, 0x44	; 68
 652:	69 81       	ldd	r22, Y+1	; 0x01
 654:	7a 81       	ldd	r23, Y+2	; 0x02
 656:	8b 81       	ldd	r24, Y+3	; 0x03
 658:	9c 81       	ldd	r25, Y+4	; 0x04
 65a:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
 65e:	dc 01       	movw	r26, r24
 660:	cb 01       	movw	r24, r22
 662:	8d 83       	std	Y+5, r24	; 0x05
 664:	9e 83       	std	Y+6, r25	; 0x06
 666:	af 83       	std	Y+7, r26	; 0x07
 668:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 66a:	20 e0       	ldi	r18, 0x00	; 0
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	40 e8       	ldi	r20, 0x80	; 128
 670:	5f e3       	ldi	r21, 0x3F	; 63
 672:	6d 81       	ldd	r22, Y+5	; 0x05
 674:	7e 81       	ldd	r23, Y+6	; 0x06
 676:	8f 81       	ldd	r24, Y+7	; 0x07
 678:	98 85       	ldd	r25, Y+8	; 0x08
 67a:	0e 94 03 05 	call	0xa06	; 0xa06 <__cmpsf2>
 67e:	88 23       	and	r24, r24
 680:	2c f4       	brge	.+10     	; 0x68c <main+0x10e>
		__ticks = 1;
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	9a 87       	std	Y+10, r25	; 0x0a
 688:	89 87       	std	Y+9, r24	; 0x09
 68a:	3f c0       	rjmp	.+126    	; 0x70a <main+0x18c>
	else if (__tmp > 65535)
 68c:	20 e0       	ldi	r18, 0x00	; 0
 68e:	3f ef       	ldi	r19, 0xFF	; 255
 690:	4f e7       	ldi	r20, 0x7F	; 127
 692:	57 e4       	ldi	r21, 0x47	; 71
 694:	6d 81       	ldd	r22, Y+5	; 0x05
 696:	7e 81       	ldd	r23, Y+6	; 0x06
 698:	8f 81       	ldd	r24, Y+7	; 0x07
 69a:	98 85       	ldd	r25, Y+8	; 0x08
 69c:	0e 94 80 05 	call	0xb00	; 0xb00 <__gesf2>
 6a0:	18 16       	cp	r1, r24
 6a2:	4c f5       	brge	.+82     	; 0x6f6 <main+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6a4:	20 e0       	ldi	r18, 0x00	; 0
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	40 e2       	ldi	r20, 0x20	; 32
 6aa:	51 e4       	ldi	r21, 0x41	; 65
 6ac:	69 81       	ldd	r22, Y+1	; 0x01
 6ae:	7a 81       	ldd	r23, Y+2	; 0x02
 6b0:	8b 81       	ldd	r24, Y+3	; 0x03
 6b2:	9c 81       	ldd	r25, Y+4	; 0x04
 6b4:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
 6b8:	dc 01       	movw	r26, r24
 6ba:	cb 01       	movw	r24, r22
 6bc:	bc 01       	movw	r22, r24
 6be:	cd 01       	movw	r24, r26
 6c0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
 6c4:	dc 01       	movw	r26, r24
 6c6:	cb 01       	movw	r24, r22
 6c8:	9a 87       	std	Y+10, r25	; 0x0a
 6ca:	89 87       	std	Y+9, r24	; 0x09
 6cc:	0f c0       	rjmp	.+30     	; 0x6ec <main+0x16e>
 6ce:	84 e6       	ldi	r24, 0x64	; 100
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	9c 87       	std	Y+12, r25	; 0x0c
 6d4:	8b 87       	std	Y+11, r24	; 0x0b
 6d6:	8b 85       	ldd	r24, Y+11	; 0x0b
 6d8:	9c 85       	ldd	r25, Y+12	; 0x0c
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	f1 f7       	brne	.-4      	; 0x6da <main+0x15c>
 6de:	9c 87       	std	Y+12, r25	; 0x0c
 6e0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6e2:	89 85       	ldd	r24, Y+9	; 0x09
 6e4:	9a 85       	ldd	r25, Y+10	; 0x0a
 6e6:	01 97       	sbiw	r24, 0x01	; 1
 6e8:	9a 87       	std	Y+10, r25	; 0x0a
 6ea:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6ec:	89 85       	ldd	r24, Y+9	; 0x09
 6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
 6f0:	00 97       	sbiw	r24, 0x00	; 0
 6f2:	69 f7       	brne	.-38     	; 0x6ce <main+0x150>
{
	ScanKeyboard();
	switch(keyAction)
    {
		case 0x0A: goto execute; break;		// к ВЫП
        case 0x0B: _delay_ms(500); goto listen; break;		// к ЗАП
 6f4:	1e c0       	rjmp	.+60     	; 0x732 <main+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6f6:	6d 81       	ldd	r22, Y+5	; 0x05
 6f8:	7e 81       	ldd	r23, Y+6	; 0x06
 6fa:	8f 81       	ldd	r24, Y+7	; 0x07
 6fc:	98 85       	ldd	r25, Y+8	; 0x08
 6fe:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
 702:	dc 01       	movw	r26, r24
 704:	cb 01       	movw	r24, r22
 706:	9a 87       	std	Y+10, r25	; 0x0a
 708:	89 87       	std	Y+9, r24	; 0x09
 70a:	89 85       	ldd	r24, Y+9	; 0x09
 70c:	9a 85       	ldd	r25, Y+10	; 0x0a
 70e:	9e 87       	std	Y+14, r25	; 0x0e
 710:	8d 87       	std	Y+13, r24	; 0x0d
 712:	8d 85       	ldd	r24, Y+13	; 0x0d
 714:	9e 85       	ldd	r25, Y+14	; 0x0e
 716:	01 97       	sbiw	r24, 0x01	; 1
 718:	f1 f7       	brne	.-4      	; 0x716 <main+0x198>
 71a:	9e 87       	std	Y+14, r25	; 0x0e
 71c:	8d 87       	std	Y+13, r24	; 0x0d
 71e:	09 c0       	rjmp	.+18     	; 0x732 <main+0x1b4>
        case 0x0C: PORTD=0b00100000; break;
 720:	82 e3       	ldi	r24, 0x32	; 50
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	20 e2       	ldi	r18, 0x20	; 32
 726:	fc 01       	movw	r30, r24
 728:	20 83       	st	Z, r18
 72a:	00 00       	nop
        default:break;
    }
	doWork();
 72c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <doWork>
}
 730:	72 cf       	rjmp	.-284    	; 0x616 <main+0x98>

listen: 										// РЕЖ ЗАПИСИ___________________
init();
 732:	0e 94 4d 02 	call	0x49a	; 0x49a <init>
PORTD=0b01000000;
 736:	82 e3       	ldi	r24, 0x32	; 50
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	20 e4       	ldi	r18, 0x40	; 64
 73c:	fc 01       	movw	r30, r24
 73e:	20 83       	st	Z, r18
while (1)
{
	ScanKeyboard();
 740:	0e 94 7d 00 	call	0xfa	; 0xfa <ScanKeyboard>
	dynamicTable[keyCount]=bufPB;
 744:	80 91 41 01 	lds	r24, 0x0141
 748:	88 2f       	mov	r24, r24
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	20 91 44 01 	lds	r18, 0x0144
 750:	8a 58       	subi	r24, 0x8A	; 138
 752:	9f 4f       	sbci	r25, 0xFF	; 255
 754:	fc 01       	movw	r30, r24
 756:	20 83       	st	Z, r18
	switch(keyAction)
 758:	80 91 42 01 	lds	r24, 0x0142
 75c:	88 2f       	mov	r24, r24
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	8b 30       	cpi	r24, 0x0B	; 11
 762:	91 05       	cpc	r25, r1
 764:	99 f0       	breq	.+38     	; 0x78c <main+0x20e>
 766:	8c 30       	cpi	r24, 0x0C	; 12
 768:	91 05       	cpc	r25, r1
 76a:	09 f4       	brne	.+2      	; 0x76e <main+0x1f0>
 76c:	8c c0       	rjmp	.+280    	; 0x886 <main+0x308>
 76e:	8a 30       	cpi	r24, 0x0A	; 10
 770:	91 05       	cpc	r25, r1
 772:	09 f0       	breq	.+2      	; 0x776 <main+0x1f8>
    {
		case 0x0A: dynamicTable[keyCount+1]=0xAA; goto execute; break;		// сохр и ВЫП
        case 0x0B: dynamicTable[keyCount+1]=0xAA; _delay_ms(500); goto manual; break;			// сохр и РУЧНОЙ
        case 0x0C: dynamicTable[keyCount]=bufPB=dynamicTable[keyCount-1]; break;				// ОТМЕНА последнего действия
        default: break;
 774:	9d c0       	rjmp	.+314    	; 0x8b0 <main+0x332>
{
	ScanKeyboard();
	dynamicTable[keyCount]=bufPB;
	switch(keyAction)
    {
		case 0x0A: dynamicTable[keyCount+1]=0xAA; goto execute; break;		// сохр и ВЫП
 776:	80 91 41 01 	lds	r24, 0x0141
 77a:	88 2f       	mov	r24, r24
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	01 96       	adiw	r24, 0x01	; 1
 780:	8a 58       	subi	r24, 0x8A	; 138
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	2a ea       	ldi	r18, 0xAA	; 170
 786:	fc 01       	movw	r30, r24
 788:	20 83       	st	Z, r18
 78a:	96 c0       	rjmp	.+300    	; 0x8b8 <main+0x33a>
        case 0x0B: dynamicTable[keyCount+1]=0xAA; _delay_ms(500); goto manual; break;			// сохр и РУЧНОЙ
 78c:	80 91 41 01 	lds	r24, 0x0141
 790:	88 2f       	mov	r24, r24
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	01 96       	adiw	r24, 0x01	; 1
 796:	8a 58       	subi	r24, 0x8A	; 138
 798:	9f 4f       	sbci	r25, 0xFF	; 255
 79a:	2a ea       	ldi	r18, 0xAA	; 170
 79c:	fc 01       	movw	r30, r24
 79e:	20 83       	st	Z, r18
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	aa ef       	ldi	r26, 0xFA	; 250
 7a6:	b3 e4       	ldi	r27, 0x43	; 67
 7a8:	8f 87       	std	Y+15, r24	; 0x0f
 7aa:	98 8b       	std	Y+16, r25	; 0x10
 7ac:	a9 8b       	std	Y+17, r26	; 0x11
 7ae:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 7b0:	20 e0       	ldi	r18, 0x00	; 0
 7b2:	30 e0       	ldi	r19, 0x00	; 0
 7b4:	4a e7       	ldi	r20, 0x7A	; 122
 7b6:	54 e4       	ldi	r21, 0x44	; 68
 7b8:	6f 85       	ldd	r22, Y+15	; 0x0f
 7ba:	78 89       	ldd	r23, Y+16	; 0x10
 7bc:	89 89       	ldd	r24, Y+17	; 0x11
 7be:	9a 89       	ldd	r25, Y+18	; 0x12
 7c0:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
 7c4:	dc 01       	movw	r26, r24
 7c6:	cb 01       	movw	r24, r22
 7c8:	8b 8b       	std	Y+19, r24	; 0x13
 7ca:	9c 8b       	std	Y+20, r25	; 0x14
 7cc:	ad 8b       	std	Y+21, r26	; 0x15
 7ce:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 7d0:	20 e0       	ldi	r18, 0x00	; 0
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	40 e8       	ldi	r20, 0x80	; 128
 7d6:	5f e3       	ldi	r21, 0x3F	; 63
 7d8:	6b 89       	ldd	r22, Y+19	; 0x13
 7da:	7c 89       	ldd	r23, Y+20	; 0x14
 7dc:	8d 89       	ldd	r24, Y+21	; 0x15
 7de:	9e 89       	ldd	r25, Y+22	; 0x16
 7e0:	0e 94 03 05 	call	0xa06	; 0xa06 <__cmpsf2>
 7e4:	88 23       	and	r24, r24
 7e6:	2c f4       	brge	.+10     	; 0x7f2 <main+0x274>
		__ticks = 1;
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	98 8f       	std	Y+24, r25	; 0x18
 7ee:	8f 8b       	std	Y+23, r24	; 0x17
 7f0:	3f c0       	rjmp	.+126    	; 0x870 <main+0x2f2>
	else if (__tmp > 65535)
 7f2:	20 e0       	ldi	r18, 0x00	; 0
 7f4:	3f ef       	ldi	r19, 0xFF	; 255
 7f6:	4f e7       	ldi	r20, 0x7F	; 127
 7f8:	57 e4       	ldi	r21, 0x47	; 71
 7fa:	6b 89       	ldd	r22, Y+19	; 0x13
 7fc:	7c 89       	ldd	r23, Y+20	; 0x14
 7fe:	8d 89       	ldd	r24, Y+21	; 0x15
 800:	9e 89       	ldd	r25, Y+22	; 0x16
 802:	0e 94 80 05 	call	0xb00	; 0xb00 <__gesf2>
 806:	18 16       	cp	r1, r24
 808:	4c f5       	brge	.+82     	; 0x85c <main+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 80a:	20 e0       	ldi	r18, 0x00	; 0
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	40 e2       	ldi	r20, 0x20	; 32
 810:	51 e4       	ldi	r21, 0x41	; 65
 812:	6f 85       	ldd	r22, Y+15	; 0x0f
 814:	78 89       	ldd	r23, Y+16	; 0x10
 816:	89 89       	ldd	r24, Y+17	; 0x11
 818:	9a 89       	ldd	r25, Y+18	; 0x12
 81a:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
 81e:	dc 01       	movw	r26, r24
 820:	cb 01       	movw	r24, r22
 822:	bc 01       	movw	r22, r24
 824:	cd 01       	movw	r24, r26
 826:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
 82a:	dc 01       	movw	r26, r24
 82c:	cb 01       	movw	r24, r22
 82e:	98 8f       	std	Y+24, r25	; 0x18
 830:	8f 8b       	std	Y+23, r24	; 0x17
 832:	0f c0       	rjmp	.+30     	; 0x852 <main+0x2d4>
 834:	84 e6       	ldi	r24, 0x64	; 100
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	9a 8f       	std	Y+26, r25	; 0x1a
 83a:	89 8f       	std	Y+25, r24	; 0x19
 83c:	89 8d       	ldd	r24, Y+25	; 0x19
 83e:	9a 8d       	ldd	r25, Y+26	; 0x1a
 840:	01 97       	sbiw	r24, 0x01	; 1
 842:	f1 f7       	brne	.-4      	; 0x840 <main+0x2c2>
 844:	9a 8f       	std	Y+26, r25	; 0x1a
 846:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 848:	8f 89       	ldd	r24, Y+23	; 0x17
 84a:	98 8d       	ldd	r25, Y+24	; 0x18
 84c:	01 97       	sbiw	r24, 0x01	; 1
 84e:	98 8f       	std	Y+24, r25	; 0x18
 850:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 852:	8f 89       	ldd	r24, Y+23	; 0x17
 854:	98 8d       	ldd	r25, Y+24	; 0x18
 856:	00 97       	sbiw	r24, 0x00	; 0
 858:	69 f7       	brne	.-38     	; 0x834 <main+0x2b6>
 85a:	d6 ce       	rjmp	.-596    	; 0x608 <main+0x8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 85c:	6b 89       	ldd	r22, Y+19	; 0x13
 85e:	7c 89       	ldd	r23, Y+20	; 0x14
 860:	8d 89       	ldd	r24, Y+21	; 0x15
 862:	9e 89       	ldd	r25, Y+22	; 0x16
 864:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
 868:	dc 01       	movw	r26, r24
 86a:	cb 01       	movw	r24, r22
 86c:	98 8f       	std	Y+24, r25	; 0x18
 86e:	8f 8b       	std	Y+23, r24	; 0x17
 870:	8f 89       	ldd	r24, Y+23	; 0x17
 872:	98 8d       	ldd	r25, Y+24	; 0x18
 874:	9c 8f       	std	Y+28, r25	; 0x1c
 876:	8b 8f       	std	Y+27, r24	; 0x1b
 878:	8b 8d       	ldd	r24, Y+27	; 0x1b
 87a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 87c:	01 97       	sbiw	r24, 0x01	; 1
 87e:	f1 f7       	brne	.-4      	; 0x87c <main+0x2fe>
 880:	9c 8f       	std	Y+28, r25	; 0x1c
 882:	8b 8f       	std	Y+27, r24	; 0x1b
 884:	c1 ce       	rjmp	.-638    	; 0x608 <main+0x8a>
        case 0x0C: dynamicTable[keyCount]=bufPB=dynamicTable[keyCount-1]; break;				// ОТМЕНА последнего действия
 886:	80 91 41 01 	lds	r24, 0x0141
 88a:	88 2f       	mov	r24, r24
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	20 91 41 01 	lds	r18, 0x0141
 892:	22 2f       	mov	r18, r18
 894:	30 e0       	ldi	r19, 0x00	; 0
 896:	21 50       	subi	r18, 0x01	; 1
 898:	31 09       	sbc	r19, r1
 89a:	2a 58       	subi	r18, 0x8A	; 138
 89c:	3f 4f       	sbci	r19, 0xFF	; 255
 89e:	f9 01       	movw	r30, r18
 8a0:	20 81       	ld	r18, Z
 8a2:	20 93 44 01 	sts	0x0144, r18
 8a6:	8a 58       	subi	r24, 0x8A	; 138
 8a8:	9f 4f       	sbci	r25, 0xFF	; 255
 8aa:	fc 01       	movw	r30, r24
 8ac:	20 83       	st	Z, r18
 8ae:	00 00       	nop
        default: break;
    }
	doWork();
 8b0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <doWork>

}
 8b4:	45 cf       	rjmp	.-374    	; 0x740 <main+0x1c2>
while (1)
{
	ScanKeyboard();
	switch(keyAction)
    {
		case 0x0A: goto execute; break;		// к ВЫП
 8b6:	00 00       	nop
	doWork();

}

execute:										// РЕЖ ВЫП___________________
init();
 8b8:	0e 94 4d 02 	call	0x49a	; 0x49a <init>
PORTD=0b10000000;
 8bc:	82 e3       	ldi	r24, 0x32	; 50
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	20 e8       	ldi	r18, 0x80	; 128
 8c2:	fc 01       	movw	r30, r24
 8c4:	20 83       	st	Z, r18
while (1)
{
	ScanKeyboard();
 8c6:	0e 94 7d 00 	call	0xfa	; 0xfa <ScanKeyboard>
	if (keyAction==0x0C) goto manual;							// удерж ОТМЕНА для выхода
 8ca:	80 91 42 01 	lds	r24, 0x0142
 8ce:	8c 30       	cpi	r24, 0x0C	; 12
 8d0:	09 f4       	brne	.+2      	; 0x8d4 <main+0x356>
 8d2:	9a ce       	rjmp	.-716    	; 0x608 <main+0x8a>
	if (dynamicTable[mas]==0xAA) mas=1;
 8d4:	80 91 3f 01 	lds	r24, 0x013F
 8d8:	88 2f       	mov	r24, r24
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	8a 58       	subi	r24, 0x8A	; 138
 8de:	9f 4f       	sbci	r25, 0xFF	; 255
 8e0:	fc 01       	movw	r30, r24
 8e2:	80 81       	ld	r24, Z
 8e4:	8a 3a       	cpi	r24, 0xAA	; 170
 8e6:	19 f4       	brne	.+6      	; 0x8ee <main+0x370>
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	80 93 3f 01 	sts	0x013F, r24
	bufPB=dynamicTable[mas];
 8ee:	80 91 3f 01 	lds	r24, 0x013F
 8f2:	88 2f       	mov	r24, r24
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	8a 58       	subi	r24, 0x8A	; 138
 8f8:	9f 4f       	sbci	r25, 0xFF	; 255
 8fa:	fc 01       	movw	r30, r24
 8fc:	80 81       	ld	r24, Z
 8fe:	80 93 44 01 	sts	0x0144, r24
	USART_Transmit(bufPB);
 902:	80 91 44 01 	lds	r24, 0x0144
 906:	0e 94 63 00 	call	0xc6	; 0xc6 <USART_Transmit>
	USART_Transmit(mas);
 90a:	80 91 3f 01 	lds	r24, 0x013F
 90e:	0e 94 63 00 	call	0xc6	; 0xc6 <USART_Transmit>
	doWork();
 912:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <doWork>
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	aa ef       	ldi	r26, 0xFA	; 250
 91c:	b3 e4       	ldi	r27, 0x43	; 67
 91e:	8d 8f       	std	Y+29, r24	; 0x1d
 920:	9e 8f       	std	Y+30, r25	; 0x1e
 922:	af 8f       	std	Y+31, r26	; 0x1f
 924:	b8 a3       	std	Y+32, r27	; 0x20
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 926:	20 e0       	ldi	r18, 0x00	; 0
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	4a e7       	ldi	r20, 0x7A	; 122
 92c:	54 e4       	ldi	r21, 0x44	; 68
 92e:	6d 8d       	ldd	r22, Y+29	; 0x1d
 930:	7e 8d       	ldd	r23, Y+30	; 0x1e
 932:	8f 8d       	ldd	r24, Y+31	; 0x1f
 934:	98 a1       	ldd	r25, Y+32	; 0x20
 936:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
 93a:	dc 01       	movw	r26, r24
 93c:	cb 01       	movw	r24, r22
 93e:	89 a3       	std	Y+33, r24	; 0x21
 940:	9a a3       	std	Y+34, r25	; 0x22
 942:	ab a3       	std	Y+35, r26	; 0x23
 944:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
 946:	20 e0       	ldi	r18, 0x00	; 0
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	40 e8       	ldi	r20, 0x80	; 128
 94c:	5f e3       	ldi	r21, 0x3F	; 63
 94e:	69 a1       	ldd	r22, Y+33	; 0x21
 950:	7a a1       	ldd	r23, Y+34	; 0x22
 952:	8b a1       	ldd	r24, Y+35	; 0x23
 954:	9c a1       	ldd	r25, Y+36	; 0x24
 956:	0e 94 03 05 	call	0xa06	; 0xa06 <__cmpsf2>
 95a:	88 23       	and	r24, r24
 95c:	2c f4       	brge	.+10     	; 0x968 <main+0x3ea>
		__ticks = 1;
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	9e a3       	std	Y+38, r25	; 0x26
 964:	8d a3       	std	Y+37, r24	; 0x25
 966:	3f c0       	rjmp	.+126    	; 0x9e6 <main+0x468>
	else if (__tmp > 65535)
 968:	20 e0       	ldi	r18, 0x00	; 0
 96a:	3f ef       	ldi	r19, 0xFF	; 255
 96c:	4f e7       	ldi	r20, 0x7F	; 127
 96e:	57 e4       	ldi	r21, 0x47	; 71
 970:	69 a1       	ldd	r22, Y+33	; 0x21
 972:	7a a1       	ldd	r23, Y+34	; 0x22
 974:	8b a1       	ldd	r24, Y+35	; 0x23
 976:	9c a1       	ldd	r25, Y+36	; 0x24
 978:	0e 94 80 05 	call	0xb00	; 0xb00 <__gesf2>
 97c:	18 16       	cp	r1, r24
 97e:	4c f5       	brge	.+82     	; 0x9d2 <main+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 980:	20 e0       	ldi	r18, 0x00	; 0
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	40 e2       	ldi	r20, 0x20	; 32
 986:	51 e4       	ldi	r21, 0x41	; 65
 988:	6d 8d       	ldd	r22, Y+29	; 0x1d
 98a:	7e 8d       	ldd	r23, Y+30	; 0x1e
 98c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 98e:	98 a1       	ldd	r25, Y+32	; 0x20
 990:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
 994:	dc 01       	movw	r26, r24
 996:	cb 01       	movw	r24, r22
 998:	bc 01       	movw	r22, r24
 99a:	cd 01       	movw	r24, r26
 99c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
 9a0:	dc 01       	movw	r26, r24
 9a2:	cb 01       	movw	r24, r22
 9a4:	9e a3       	std	Y+38, r25	; 0x26
 9a6:	8d a3       	std	Y+37, r24	; 0x25
 9a8:	0f c0       	rjmp	.+30     	; 0x9c8 <main+0x44a>
 9aa:	84 e6       	ldi	r24, 0x64	; 100
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	98 a7       	std	Y+40, r25	; 0x28
 9b0:	8f a3       	std	Y+39, r24	; 0x27
 9b2:	8f a1       	ldd	r24, Y+39	; 0x27
 9b4:	98 a5       	ldd	r25, Y+40	; 0x28
 9b6:	01 97       	sbiw	r24, 0x01	; 1
 9b8:	f1 f7       	brne	.-4      	; 0x9b6 <main+0x438>
 9ba:	98 a7       	std	Y+40, r25	; 0x28
 9bc:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 9be:	8d a1       	ldd	r24, Y+37	; 0x25
 9c0:	9e a1       	ldd	r25, Y+38	; 0x26
 9c2:	01 97       	sbiw	r24, 0x01	; 1
 9c4:	9e a3       	std	Y+38, r25	; 0x26
 9c6:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 9c8:	8d a1       	ldd	r24, Y+37	; 0x25
 9ca:	9e a1       	ldd	r25, Y+38	; 0x26
 9cc:	00 97       	sbiw	r24, 0x00	; 0
 9ce:	69 f7       	brne	.-38     	; 0x9aa <main+0x42c>
 9d0:	14 c0       	rjmp	.+40     	; 0x9fa <main+0x47c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 9d2:	69 a1       	ldd	r22, Y+33	; 0x21
 9d4:	7a a1       	ldd	r23, Y+34	; 0x22
 9d6:	8b a1       	ldd	r24, Y+35	; 0x23
 9d8:	9c a1       	ldd	r25, Y+36	; 0x24
 9da:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
 9de:	dc 01       	movw	r26, r24
 9e0:	cb 01       	movw	r24, r22
 9e2:	9e a3       	std	Y+38, r25	; 0x26
 9e4:	8d a3       	std	Y+37, r24	; 0x25
 9e6:	8d a1       	ldd	r24, Y+37	; 0x25
 9e8:	9e a1       	ldd	r25, Y+38	; 0x26
 9ea:	9a a7       	std	Y+42, r25	; 0x2a
 9ec:	89 a7       	std	Y+41, r24	; 0x29
 9ee:	89 a5       	ldd	r24, Y+41	; 0x29
 9f0:	9a a5       	ldd	r25, Y+42	; 0x2a
 9f2:	01 97       	sbiw	r24, 0x01	; 1
 9f4:	f1 f7       	brne	.-4      	; 0x9f2 <main+0x474>
 9f6:	9a a7       	std	Y+42, r25	; 0x2a
 9f8:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(500);
	mas++;
 9fa:	80 91 3f 01 	lds	r24, 0x013F
 9fe:	8f 5f       	subi	r24, 0xFF	; 255
 a00:	80 93 3f 01 	sts	0x013F, r24
}
 a04:	60 cf       	rjmp	.-320    	; 0x8c6 <main+0x348>

00000a06 <__cmpsf2>:
 a06:	2f d0       	rcall	.+94     	; 0xa66 <__fp_cmp>
 a08:	08 f4       	brcc	.+2      	; 0xa0c <__cmpsf2+0x6>
 a0a:	81 e0       	ldi	r24, 0x01	; 1
 a0c:	08 95       	ret

00000a0e <__fixunssfsi>:
 a0e:	57 d0       	rcall	.+174    	; 0xabe <__fp_splitA>
 a10:	88 f0       	brcs	.+34     	; 0xa34 <__fixunssfsi+0x26>
 a12:	9f 57       	subi	r25, 0x7F	; 127
 a14:	90 f0       	brcs	.+36     	; 0xa3a <__fixunssfsi+0x2c>
 a16:	b9 2f       	mov	r27, r25
 a18:	99 27       	eor	r25, r25
 a1a:	b7 51       	subi	r27, 0x17	; 23
 a1c:	a0 f0       	brcs	.+40     	; 0xa46 <__fixunssfsi+0x38>
 a1e:	d1 f0       	breq	.+52     	; 0xa54 <__fixunssfsi+0x46>
 a20:	66 0f       	add	r22, r22
 a22:	77 1f       	adc	r23, r23
 a24:	88 1f       	adc	r24, r24
 a26:	99 1f       	adc	r25, r25
 a28:	1a f0       	brmi	.+6      	; 0xa30 <__fixunssfsi+0x22>
 a2a:	ba 95       	dec	r27
 a2c:	c9 f7       	brne	.-14     	; 0xa20 <__fixunssfsi+0x12>
 a2e:	12 c0       	rjmp	.+36     	; 0xa54 <__fixunssfsi+0x46>
 a30:	b1 30       	cpi	r27, 0x01	; 1
 a32:	81 f0       	breq	.+32     	; 0xa54 <__fixunssfsi+0x46>
 a34:	5e d0       	rcall	.+188    	; 0xaf2 <__fp_zero>
 a36:	b1 e0       	ldi	r27, 0x01	; 1
 a38:	08 95       	ret
 a3a:	5b c0       	rjmp	.+182    	; 0xaf2 <__fp_zero>
 a3c:	67 2f       	mov	r22, r23
 a3e:	78 2f       	mov	r23, r24
 a40:	88 27       	eor	r24, r24
 a42:	b8 5f       	subi	r27, 0xF8	; 248
 a44:	39 f0       	breq	.+14     	; 0xa54 <__fixunssfsi+0x46>
 a46:	b9 3f       	cpi	r27, 0xF9	; 249
 a48:	cc f3       	brlt	.-14     	; 0xa3c <__fixunssfsi+0x2e>
 a4a:	86 95       	lsr	r24
 a4c:	77 95       	ror	r23
 a4e:	67 95       	ror	r22
 a50:	b3 95       	inc	r27
 a52:	d9 f7       	brne	.-10     	; 0xa4a <__fixunssfsi+0x3c>
 a54:	3e f4       	brtc	.+14     	; 0xa64 <__fixunssfsi+0x56>
 a56:	90 95       	com	r25
 a58:	80 95       	com	r24
 a5a:	70 95       	com	r23
 a5c:	61 95       	neg	r22
 a5e:	7f 4f       	sbci	r23, 0xFF	; 255
 a60:	8f 4f       	sbci	r24, 0xFF	; 255
 a62:	9f 4f       	sbci	r25, 0xFF	; 255
 a64:	08 95       	ret

00000a66 <__fp_cmp>:
 a66:	99 0f       	add	r25, r25
 a68:	00 08       	sbc	r0, r0
 a6a:	55 0f       	add	r21, r21
 a6c:	aa 0b       	sbc	r26, r26
 a6e:	e0 e8       	ldi	r30, 0x80	; 128
 a70:	fe ef       	ldi	r31, 0xFE	; 254
 a72:	16 16       	cp	r1, r22
 a74:	17 06       	cpc	r1, r23
 a76:	e8 07       	cpc	r30, r24
 a78:	f9 07       	cpc	r31, r25
 a7a:	c0 f0       	brcs	.+48     	; 0xaac <__fp_cmp+0x46>
 a7c:	12 16       	cp	r1, r18
 a7e:	13 06       	cpc	r1, r19
 a80:	e4 07       	cpc	r30, r20
 a82:	f5 07       	cpc	r31, r21
 a84:	98 f0       	brcs	.+38     	; 0xaac <__fp_cmp+0x46>
 a86:	62 1b       	sub	r22, r18
 a88:	73 0b       	sbc	r23, r19
 a8a:	84 0b       	sbc	r24, r20
 a8c:	95 0b       	sbc	r25, r21
 a8e:	39 f4       	brne	.+14     	; 0xa9e <__fp_cmp+0x38>
 a90:	0a 26       	eor	r0, r26
 a92:	61 f0       	breq	.+24     	; 0xaac <__fp_cmp+0x46>
 a94:	23 2b       	or	r18, r19
 a96:	24 2b       	or	r18, r20
 a98:	25 2b       	or	r18, r21
 a9a:	21 f4       	brne	.+8      	; 0xaa4 <__fp_cmp+0x3e>
 a9c:	08 95       	ret
 a9e:	0a 26       	eor	r0, r26
 aa0:	09 f4       	brne	.+2      	; 0xaa4 <__fp_cmp+0x3e>
 aa2:	a1 40       	sbci	r26, 0x01	; 1
 aa4:	a6 95       	lsr	r26
 aa6:	8f ef       	ldi	r24, 0xFF	; 255
 aa8:	81 1d       	adc	r24, r1
 aaa:	81 1d       	adc	r24, r1
 aac:	08 95       	ret

00000aae <__fp_split3>:
 aae:	57 fd       	sbrc	r21, 7
 ab0:	90 58       	subi	r25, 0x80	; 128
 ab2:	44 0f       	add	r20, r20
 ab4:	55 1f       	adc	r21, r21
 ab6:	59 f0       	breq	.+22     	; 0xace <__fp_splitA+0x10>
 ab8:	5f 3f       	cpi	r21, 0xFF	; 255
 aba:	71 f0       	breq	.+28     	; 0xad8 <__fp_splitA+0x1a>
 abc:	47 95       	ror	r20

00000abe <__fp_splitA>:
 abe:	88 0f       	add	r24, r24
 ac0:	97 fb       	bst	r25, 7
 ac2:	99 1f       	adc	r25, r25
 ac4:	61 f0       	breq	.+24     	; 0xade <__fp_splitA+0x20>
 ac6:	9f 3f       	cpi	r25, 0xFF	; 255
 ac8:	79 f0       	breq	.+30     	; 0xae8 <__fp_splitA+0x2a>
 aca:	87 95       	ror	r24
 acc:	08 95       	ret
 ace:	12 16       	cp	r1, r18
 ad0:	13 06       	cpc	r1, r19
 ad2:	14 06       	cpc	r1, r20
 ad4:	55 1f       	adc	r21, r21
 ad6:	f2 cf       	rjmp	.-28     	; 0xabc <__fp_split3+0xe>
 ad8:	46 95       	lsr	r20
 ada:	f1 df       	rcall	.-30     	; 0xabe <__fp_splitA>
 adc:	08 c0       	rjmp	.+16     	; 0xaee <__fp_splitA+0x30>
 ade:	16 16       	cp	r1, r22
 ae0:	17 06       	cpc	r1, r23
 ae2:	18 06       	cpc	r1, r24
 ae4:	99 1f       	adc	r25, r25
 ae6:	f1 cf       	rjmp	.-30     	; 0xaca <__fp_splitA+0xc>
 ae8:	86 95       	lsr	r24
 aea:	71 05       	cpc	r23, r1
 aec:	61 05       	cpc	r22, r1
 aee:	08 94       	sec
 af0:	08 95       	ret

00000af2 <__fp_zero>:
 af2:	e8 94       	clt

00000af4 <__fp_szero>:
 af4:	bb 27       	eor	r27, r27
 af6:	66 27       	eor	r22, r22
 af8:	77 27       	eor	r23, r23
 afa:	cb 01       	movw	r24, r22
 afc:	97 f9       	bld	r25, 7
 afe:	08 95       	ret

00000b00 <__gesf2>:
 b00:	b2 df       	rcall	.-156    	; 0xa66 <__fp_cmp>
 b02:	08 f4       	brcc	.+2      	; 0xb06 <__gesf2+0x6>
 b04:	8f ef       	ldi	r24, 0xFF	; 255
 b06:	08 95       	ret

00000b08 <__mulsf3>:
 b08:	0b d0       	rcall	.+22     	; 0xb20 <__mulsf3x>
 b0a:	78 c0       	rjmp	.+240    	; 0xbfc <__fp_round>
 b0c:	69 d0       	rcall	.+210    	; 0xbe0 <__fp_pscA>
 b0e:	28 f0       	brcs	.+10     	; 0xb1a <__mulsf3+0x12>
 b10:	6e d0       	rcall	.+220    	; 0xbee <__fp_pscB>
 b12:	18 f0       	brcs	.+6      	; 0xb1a <__mulsf3+0x12>
 b14:	95 23       	and	r25, r21
 b16:	09 f0       	breq	.+2      	; 0xb1a <__mulsf3+0x12>
 b18:	5a c0       	rjmp	.+180    	; 0xbce <__fp_inf>
 b1a:	5f c0       	rjmp	.+190    	; 0xbda <__fp_nan>
 b1c:	11 24       	eor	r1, r1
 b1e:	ea cf       	rjmp	.-44     	; 0xaf4 <__fp_szero>

00000b20 <__mulsf3x>:
 b20:	c6 df       	rcall	.-116    	; 0xaae <__fp_split3>
 b22:	a0 f3       	brcs	.-24     	; 0xb0c <__mulsf3+0x4>

00000b24 <__mulsf3_pse>:
 b24:	95 9f       	mul	r25, r21
 b26:	d1 f3       	breq	.-12     	; 0xb1c <__mulsf3+0x14>
 b28:	95 0f       	add	r25, r21
 b2a:	50 e0       	ldi	r21, 0x00	; 0
 b2c:	55 1f       	adc	r21, r21
 b2e:	62 9f       	mul	r22, r18
 b30:	f0 01       	movw	r30, r0
 b32:	72 9f       	mul	r23, r18
 b34:	bb 27       	eor	r27, r27
 b36:	f0 0d       	add	r31, r0
 b38:	b1 1d       	adc	r27, r1
 b3a:	63 9f       	mul	r22, r19
 b3c:	aa 27       	eor	r26, r26
 b3e:	f0 0d       	add	r31, r0
 b40:	b1 1d       	adc	r27, r1
 b42:	aa 1f       	adc	r26, r26
 b44:	64 9f       	mul	r22, r20
 b46:	66 27       	eor	r22, r22
 b48:	b0 0d       	add	r27, r0
 b4a:	a1 1d       	adc	r26, r1
 b4c:	66 1f       	adc	r22, r22
 b4e:	82 9f       	mul	r24, r18
 b50:	22 27       	eor	r18, r18
 b52:	b0 0d       	add	r27, r0
 b54:	a1 1d       	adc	r26, r1
 b56:	62 1f       	adc	r22, r18
 b58:	73 9f       	mul	r23, r19
 b5a:	b0 0d       	add	r27, r0
 b5c:	a1 1d       	adc	r26, r1
 b5e:	62 1f       	adc	r22, r18
 b60:	83 9f       	mul	r24, r19
 b62:	a0 0d       	add	r26, r0
 b64:	61 1d       	adc	r22, r1
 b66:	22 1f       	adc	r18, r18
 b68:	74 9f       	mul	r23, r20
 b6a:	33 27       	eor	r19, r19
 b6c:	a0 0d       	add	r26, r0
 b6e:	61 1d       	adc	r22, r1
 b70:	23 1f       	adc	r18, r19
 b72:	84 9f       	mul	r24, r20
 b74:	60 0d       	add	r22, r0
 b76:	21 1d       	adc	r18, r1
 b78:	82 2f       	mov	r24, r18
 b7a:	76 2f       	mov	r23, r22
 b7c:	6a 2f       	mov	r22, r26
 b7e:	11 24       	eor	r1, r1
 b80:	9f 57       	subi	r25, 0x7F	; 127
 b82:	50 40       	sbci	r21, 0x00	; 0
 b84:	8a f0       	brmi	.+34     	; 0xba8 <__mulsf3_pse+0x84>
 b86:	e1 f0       	breq	.+56     	; 0xbc0 <__mulsf3_pse+0x9c>
 b88:	88 23       	and	r24, r24
 b8a:	4a f0       	brmi	.+18     	; 0xb9e <__mulsf3_pse+0x7a>
 b8c:	ee 0f       	add	r30, r30
 b8e:	ff 1f       	adc	r31, r31
 b90:	bb 1f       	adc	r27, r27
 b92:	66 1f       	adc	r22, r22
 b94:	77 1f       	adc	r23, r23
 b96:	88 1f       	adc	r24, r24
 b98:	91 50       	subi	r25, 0x01	; 1
 b9a:	50 40       	sbci	r21, 0x00	; 0
 b9c:	a9 f7       	brne	.-22     	; 0xb88 <__mulsf3_pse+0x64>
 b9e:	9e 3f       	cpi	r25, 0xFE	; 254
 ba0:	51 05       	cpc	r21, r1
 ba2:	70 f0       	brcs	.+28     	; 0xbc0 <__mulsf3_pse+0x9c>
 ba4:	14 c0       	rjmp	.+40     	; 0xbce <__fp_inf>
 ba6:	a6 cf       	rjmp	.-180    	; 0xaf4 <__fp_szero>
 ba8:	5f 3f       	cpi	r21, 0xFF	; 255
 baa:	ec f3       	brlt	.-6      	; 0xba6 <__mulsf3_pse+0x82>
 bac:	98 3e       	cpi	r25, 0xE8	; 232
 bae:	dc f3       	brlt	.-10     	; 0xba6 <__mulsf3_pse+0x82>
 bb0:	86 95       	lsr	r24
 bb2:	77 95       	ror	r23
 bb4:	67 95       	ror	r22
 bb6:	b7 95       	ror	r27
 bb8:	f7 95       	ror	r31
 bba:	e7 95       	ror	r30
 bbc:	9f 5f       	subi	r25, 0xFF	; 255
 bbe:	c1 f7       	brne	.-16     	; 0xbb0 <__mulsf3_pse+0x8c>
 bc0:	fe 2b       	or	r31, r30
 bc2:	88 0f       	add	r24, r24
 bc4:	91 1d       	adc	r25, r1
 bc6:	96 95       	lsr	r25
 bc8:	87 95       	ror	r24
 bca:	97 f9       	bld	r25, 7
 bcc:	08 95       	ret

00000bce <__fp_inf>:
 bce:	97 f9       	bld	r25, 7
 bd0:	9f 67       	ori	r25, 0x7F	; 127
 bd2:	80 e8       	ldi	r24, 0x80	; 128
 bd4:	70 e0       	ldi	r23, 0x00	; 0
 bd6:	60 e0       	ldi	r22, 0x00	; 0
 bd8:	08 95       	ret

00000bda <__fp_nan>:
 bda:	9f ef       	ldi	r25, 0xFF	; 255
 bdc:	80 ec       	ldi	r24, 0xC0	; 192
 bde:	08 95       	ret

00000be0 <__fp_pscA>:
 be0:	00 24       	eor	r0, r0
 be2:	0a 94       	dec	r0
 be4:	16 16       	cp	r1, r22
 be6:	17 06       	cpc	r1, r23
 be8:	18 06       	cpc	r1, r24
 bea:	09 06       	cpc	r0, r25
 bec:	08 95       	ret

00000bee <__fp_pscB>:
 bee:	00 24       	eor	r0, r0
 bf0:	0a 94       	dec	r0
 bf2:	12 16       	cp	r1, r18
 bf4:	13 06       	cpc	r1, r19
 bf6:	14 06       	cpc	r1, r20
 bf8:	05 06       	cpc	r0, r21
 bfa:	08 95       	ret

00000bfc <__fp_round>:
 bfc:	09 2e       	mov	r0, r25
 bfe:	03 94       	inc	r0
 c00:	00 0c       	add	r0, r0
 c02:	11 f4       	brne	.+4      	; 0xc08 <__fp_round+0xc>
 c04:	88 23       	and	r24, r24
 c06:	52 f0       	brmi	.+20     	; 0xc1c <__fp_round+0x20>
 c08:	bb 0f       	add	r27, r27
 c0a:	40 f4       	brcc	.+16     	; 0xc1c <__fp_round+0x20>
 c0c:	bf 2b       	or	r27, r31
 c0e:	11 f4       	brne	.+4      	; 0xc14 <__fp_round+0x18>
 c10:	60 ff       	sbrs	r22, 0
 c12:	04 c0       	rjmp	.+8      	; 0xc1c <__fp_round+0x20>
 c14:	6f 5f       	subi	r22, 0xFF	; 255
 c16:	7f 4f       	sbci	r23, 0xFF	; 255
 c18:	8f 4f       	sbci	r24, 0xFF	; 255
 c1a:	9f 4f       	sbci	r25, 0xFF	; 255
 c1c:	08 95       	ret

00000c1e <_exit>:
 c1e:	f8 94       	cli

00000c20 <__stop_program>:
 c20:	ff cf       	rjmp	.-2      	; 0xc20 <__stop_program>
